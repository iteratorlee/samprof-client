// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0-devel
// 	protoc        v3.19.4
// source: gpu_profiling.proto

package gpuprofiling

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CPUCallingContextTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Root   *CPUCallingContextNode `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
	RootPC uint64                 `protobuf:"varint,2,opt,name=rootPC,proto3" json:"rootPC,omitempty"`
	RootID uint64                 `protobuf:"varint,3,opt,name=rootID,proto3" json:"rootID,omitempty"`
	//repeated CPUCallingContextNode nodes = 2;
	NodeMap map[int64]*CPUCallingContextNode `protobuf:"bytes,4,rep,name=nodeMap,proto3" json:"nodeMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CPUCallingContextTree) Reset() {
	*x = CPUCallingContextTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpu_profiling_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPUCallingContextTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPUCallingContextTree) ProtoMessage() {}

func (x *CPUCallingContextTree) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_profiling_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPUCallingContextTree.ProtoReflect.Descriptor instead.
func (*CPUCallingContextTree) Descriptor() ([]byte, []int) {
	return file_gpu_profiling_proto_rawDescGZIP(), []int{0}
}

func (x *CPUCallingContextTree) GetRoot() *CPUCallingContextNode {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *CPUCallingContextTree) GetRootPC() uint64 {
	if x != nil {
		return x.RootPC
	}
	return 0
}

func (x *CPUCallingContextTree) GetRootID() uint64 {
	if x != nil {
		return x.RootID
	}
	return 0
}

func (x *CPUCallingContextTree) GetNodeMap() map[int64]*CPUCallingContextNode {
	if x != nil {
		return x.NodeMap
	}
	return nil
}

type CPUCallingContextNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique id of a CPU cct in a profiling session
	Id       uint64                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Pc       uint64                   `protobuf:"varint,2,opt,name=pc,proto3" json:"pc,omitempty"`
	Offset   uint64                   `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	FuncName string                   `protobuf:"bytes,4,opt,name=funcName,proto3" json:"funcName,omitempty"`
	ParentID uint64                   `protobuf:"varint,5,opt,name=parentID,proto3" json:"parentID,omitempty"`
	ParentPC uint64                   `protobuf:"varint,6,opt,name=parentPC,proto3" json:"parentPC,omitempty"`
	Childs   []*CPUCallingContextNode `protobuf:"bytes,7,rep,name=childs,proto3" json:"childs,omitempty"`
	ChildIDs []uint64                 `protobuf:"varint,8,rep,packed,name=childIDs,proto3" json:"childIDs,omitempty"`
	ChildPCs []uint64                 `protobuf:"varint,9,rep,packed,name=childPCs,proto3" json:"childPCs,omitempty"`
}

func (x *CPUCallingContextNode) Reset() {
	*x = CPUCallingContextNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpu_profiling_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPUCallingContextNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPUCallingContextNode) ProtoMessage() {}

func (x *CPUCallingContextNode) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_profiling_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPUCallingContextNode.ProtoReflect.Descriptor instead.
func (*CPUCallingContextNode) Descriptor() ([]byte, []int) {
	return file_gpu_profiling_proto_rawDescGZIP(), []int{1}
}

func (x *CPUCallingContextNode) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CPUCallingContextNode) GetPc() uint64 {
	if x != nil {
		return x.Pc
	}
	return 0
}

func (x *CPUCallingContextNode) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *CPUCallingContextNode) GetFuncName() string {
	if x != nil {
		return x.FuncName
	}
	return ""
}

func (x *CPUCallingContextNode) GetParentID() uint64 {
	if x != nil {
		return x.ParentID
	}
	return 0
}

func (x *CPUCallingContextNode) GetParentPC() uint64 {
	if x != nil {
		return x.ParentPC
	}
	return 0
}

func (x *CPUCallingContextNode) GetChilds() []*CPUCallingContextNode {
	if x != nil {
		return x.Childs
	}
	return nil
}

func (x *CPUCallingContextNode) GetChildIDs() []uint64 {
	if x != nil {
		return x.ChildIDs
	}
	return nil
}

func (x *CPUCallingContextNode) GetChildPCs() []uint64 {
	if x != nil {
		return x.ChildPCs
	}
	return nil
}

type GPUCallingGraphNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CubinCrc  uint64 `protobuf:"varint,1,opt,name=cubinCrc,proto3" json:"cubinCrc,omitempty"`
	FuncName  string `protobuf:"bytes,2,opt,name=funcName,proto3" json:"funcName,omitempty"`
	AddrBegin uint64 `protobuf:"varint,3,opt,name=addrBegin,proto3" json:"addrBegin,omitempty"`
	AddrEnd   uint64 `protobuf:"varint,4,opt,name=addrEnd,proto3" json:"addrEnd,omitempty"`
	Weight    uint64 `protobuf:"varint,5,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *GPUCallingGraphNode) Reset() {
	*x = GPUCallingGraphNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpu_profiling_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPUCallingGraphNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPUCallingGraphNode) ProtoMessage() {}

func (x *GPUCallingGraphNode) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_profiling_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPUCallingGraphNode.ProtoReflect.Descriptor instead.
func (*GPUCallingGraphNode) Descriptor() ([]byte, []int) {
	return file_gpu_profiling_proto_rawDescGZIP(), []int{2}
}

func (x *GPUCallingGraphNode) GetCubinCrc() uint64 {
	if x != nil {
		return x.CubinCrc
	}
	return 0
}

func (x *GPUCallingGraphNode) GetFuncName() string {
	if x != nil {
		return x.FuncName
	}
	return ""
}

func (x *GPUCallingGraphNode) GetAddrBegin() uint64 {
	if x != nil {
		return x.AddrBegin
	}
	return 0
}

func (x *GPUCallingGraphNode) GetAddrEnd() uint64 {
	if x != nil {
		return x.AddrEnd
	}
	return 0
}

func (x *GPUCallingGraphNode) GetWeight() uint64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type GPUCallingGraphEdge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// GPUCallingGraphNode src = 1;
	SrcFuncName string `protobuf:"bytes,1,opt,name=srcFuncName,proto3" json:"srcFuncName,omitempty"`
	SrcPCOffset uint64 `protobuf:"varint,2,opt,name=srcPCOffset,proto3" json:"srcPCOffset,omitempty"`
	// GPUCallingGraphNode dst = 3;
	DstFuncName string `protobuf:"bytes,3,opt,name=dstFuncName,proto3" json:"dstFuncName,omitempty"`
	DstPCOffset uint64 `protobuf:"varint,4,opt,name=dstPCOffset,proto3" json:"dstPCOffset,omitempty"`
	Weight      uint64 `protobuf:"varint,5,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *GPUCallingGraphEdge) Reset() {
	*x = GPUCallingGraphEdge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpu_profiling_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPUCallingGraphEdge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPUCallingGraphEdge) ProtoMessage() {}

func (x *GPUCallingGraphEdge) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_profiling_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPUCallingGraphEdge.ProtoReflect.Descriptor instead.
func (*GPUCallingGraphEdge) Descriptor() ([]byte, []int) {
	return file_gpu_profiling_proto_rawDescGZIP(), []int{3}
}

func (x *GPUCallingGraphEdge) GetSrcFuncName() string {
	if x != nil {
		return x.SrcFuncName
	}
	return ""
}

func (x *GPUCallingGraphEdge) GetSrcPCOffset() uint64 {
	if x != nil {
		return x.SrcPCOffset
	}
	return 0
}

func (x *GPUCallingGraphEdge) GetDstFuncName() string {
	if x != nil {
		return x.DstFuncName
	}
	return ""
}

func (x *GPUCallingGraphEdge) GetDstPCOffset() uint64 {
	if x != nil {
		return x.DstPCOffset
	}
	return 0
}

func (x *GPUCallingGraphEdge) GetWeight() uint64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type GPUCallingGraph struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []*GPUCallingGraphNode `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	Edges []*GPUCallingGraphEdge `protobuf:"bytes,2,rep,name=edges,proto3" json:"edges,omitempty"`
}

func (x *GPUCallingGraph) Reset() {
	*x = GPUCallingGraph{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpu_profiling_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPUCallingGraph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPUCallingGraph) ProtoMessage() {}

func (x *GPUCallingGraph) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_profiling_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPUCallingGraph.ProtoReflect.Descriptor instead.
func (*GPUCallingGraph) Descriptor() ([]byte, []int) {
	return file_gpu_profiling_proto_rawDescGZIP(), []int{4}
}

func (x *GPUCallingGraph) GetNodes() []*GPUCallingGraphNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *GPUCallingGraph) GetEdges() []*GPUCallingGraphEdge {
	if x != nil {
		return x.Edges
	}
	return nil
}

// new version pc sampling api
type PCSamplingStallReason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// collected stall reason index.
	PcSamplingStallReasonIndex uint32 `protobuf:"varint,1,opt,name=pcSamplingStallReasonIndex,proto3" json:"pcSamplingStallReasonIndex,omitempty"`
	// number of times the PC was sampled with the stallReaosn.
	Samples uint32 `protobuf:"varint,2,opt,name=samples,proto3" json:"samples,omitempty"`
}

func (x *PCSamplingStallReason) Reset() {
	*x = PCSamplingStallReason{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpu_profiling_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PCSamplingStallReason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PCSamplingStallReason) ProtoMessage() {}

func (x *PCSamplingStallReason) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_profiling_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PCSamplingStallReason.ProtoReflect.Descriptor instead.
func (*PCSamplingStallReason) Descriptor() ([]byte, []int) {
	return file_gpu_profiling_proto_rawDescGZIP(), []int{5}
}

func (x *PCSamplingStallReason) GetPcSamplingStallReasonIndex() uint32 {
	if x != nil {
		return x.PcSamplingStallReasonIndex
	}
	return 0
}

func (x *PCSamplingStallReason) GetSamples() uint32 {
	if x != nil {
		return x.Samples
	}
	return 0
}

type CUptiPCSamplingPCData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size             uint32                   `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	CubinCrc         uint64                   `protobuf:"varint,2,opt,name=cubinCrc,proto3" json:"cubinCrc,omitempty"`
	PcOffset         uint64                   `protobuf:"varint,3,opt,name=pcOffset,proto3" json:"pcOffset,omitempty"`
	FunctionIndex    uint32                   `protobuf:"varint,4,opt,name=functionIndex,proto3" json:"functionIndex,omitempty"`
	Pad              uint32                   `protobuf:"varint,5,opt,name=pad,proto3" json:"pad,omitempty"`
	FunctionName     string                   `protobuf:"bytes,6,opt,name=functionName,proto3" json:"functionName,omitempty"`
	StallReasonCount uint32                   `protobuf:"varint,7,opt,name=stallReasonCount,proto3" json:"stallReasonCount,omitempty"`
	StallReason      []*PCSamplingStallReason `protobuf:"bytes,8,rep,name=stallReason,proto3" json:"stallReason,omitempty"`
	ParentCPUPCID    int64                    `protobuf:"varint,9,opt,name=parentCPUPCID,proto3" json:"parentCPUPCID,omitempty"`
	// in old version CUPTI (<11.3), pc sample it correlated to a CUDA api
	CorrelationId uint32 `protobuf:"varint,10,opt,name=correlationId,proto3" json:"correlationId,omitempty"`
}

func (x *CUptiPCSamplingPCData) Reset() {
	*x = CUptiPCSamplingPCData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpu_profiling_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUptiPCSamplingPCData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUptiPCSamplingPCData) ProtoMessage() {}

func (x *CUptiPCSamplingPCData) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_profiling_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUptiPCSamplingPCData.ProtoReflect.Descriptor instead.
func (*CUptiPCSamplingPCData) Descriptor() ([]byte, []int) {
	return file_gpu_profiling_proto_rawDescGZIP(), []int{6}
}

func (x *CUptiPCSamplingPCData) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *CUptiPCSamplingPCData) GetCubinCrc() uint64 {
	if x != nil {
		return x.CubinCrc
	}
	return 0
}

func (x *CUptiPCSamplingPCData) GetPcOffset() uint64 {
	if x != nil {
		return x.PcOffset
	}
	return 0
}

func (x *CUptiPCSamplingPCData) GetFunctionIndex() uint32 {
	if x != nil {
		return x.FunctionIndex
	}
	return 0
}

func (x *CUptiPCSamplingPCData) GetPad() uint32 {
	if x != nil {
		return x.Pad
	}
	return 0
}

func (x *CUptiPCSamplingPCData) GetFunctionName() string {
	if x != nil {
		return x.FunctionName
	}
	return ""
}

func (x *CUptiPCSamplingPCData) GetStallReasonCount() uint32 {
	if x != nil {
		return x.StallReasonCount
	}
	return 0
}

func (x *CUptiPCSamplingPCData) GetStallReason() []*PCSamplingStallReason {
	if x != nil {
		return x.StallReason
	}
	return nil
}

func (x *CUptiPCSamplingPCData) GetParentCPUPCID() int64 {
	if x != nil {
		return x.ParentCPUPCID
	}
	return 0
}

func (x *CUptiPCSamplingPCData) GetCorrelationId() uint32 {
	if x != nil {
		return x.CorrelationId
	}
	return 0
}

type CUptiPCSamplingData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size                      uint32                   `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	CollectNumPcs             uint32                   `protobuf:"varint,2,opt,name=collectNumPcs,proto3" json:"collectNumPcs,omitempty"`
	TotalSamples              uint64                   `protobuf:"varint,3,opt,name=totalSamples,proto3" json:"totalSamples,omitempty"`
	DroppedSamples            uint64                   `protobuf:"varint,4,opt,name=droppedSamples,proto3" json:"droppedSamples,omitempty"`
	TotalNumPcs               uint32                   `protobuf:"varint,5,opt,name=totalNumPcs,proto3" json:"totalNumPcs,omitempty"`
	RemainingNumPcs           uint32                   `protobuf:"varint,6,opt,name=remainingNumPcs,proto3" json:"remainingNumPcs,omitempty"`
	RangeId                   uint64                   `protobuf:"varint,7,opt,name=rangeId,proto3" json:"rangeId,omitempty"`
	PPcData                   []*CUptiPCSamplingPCData `protobuf:"bytes,8,rep,name=pPcData,proto3" json:"pPcData,omitempty"`
	NonUsrKernelsTotalSamples uint64                   `protobuf:"varint,9,opt,name=nonUsrKernelsTotalSamples,proto3" json:"nonUsrKernelsTotalSamples,omitempty"`
}

func (x *CUptiPCSamplingData) Reset() {
	*x = CUptiPCSamplingData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpu_profiling_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUptiPCSamplingData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUptiPCSamplingData) ProtoMessage() {}

func (x *CUptiPCSamplingData) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_profiling_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUptiPCSamplingData.ProtoReflect.Descriptor instead.
func (*CUptiPCSamplingData) Descriptor() ([]byte, []int) {
	return file_gpu_profiling_proto_rawDescGZIP(), []int{7}
}

func (x *CUptiPCSamplingData) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *CUptiPCSamplingData) GetCollectNumPcs() uint32 {
	if x != nil {
		return x.CollectNumPcs
	}
	return 0
}

func (x *CUptiPCSamplingData) GetTotalSamples() uint64 {
	if x != nil {
		return x.TotalSamples
	}
	return 0
}

func (x *CUptiPCSamplingData) GetDroppedSamples() uint64 {
	if x != nil {
		return x.DroppedSamples
	}
	return 0
}

func (x *CUptiPCSamplingData) GetTotalNumPcs() uint32 {
	if x != nil {
		return x.TotalNumPcs
	}
	return 0
}

func (x *CUptiPCSamplingData) GetRemainingNumPcs() uint32 {
	if x != nil {
		return x.RemainingNumPcs
	}
	return 0
}

func (x *CUptiPCSamplingData) GetRangeId() uint64 {
	if x != nil {
		return x.RangeId
	}
	return 0
}

func (x *CUptiPCSamplingData) GetPPcData() []*CUptiPCSamplingPCData {
	if x != nil {
		return x.PPcData
	}
	return nil
}

func (x *CUptiPCSamplingData) GetNonUsrKernelsTotalSamples() uint64 {
	if x != nil {
		return x.NonUsrKernelsTotalSamples
	}
	return 0
}

type GPUProfilingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duration uint32 `protobuf:"varint,1,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *GPUProfilingRequest) Reset() {
	*x = GPUProfilingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpu_profiling_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPUProfilingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPUProfilingRequest) ProtoMessage() {}

func (x *GPUProfilingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_profiling_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPUProfilingRequest.ProtoReflect.Descriptor instead.
func (*GPUProfilingRequest) Descriptor() ([]byte, []int) {
	return file_gpu_profiling_proto_rawDescGZIP(), []int{8}
}

func (x *GPUProfilingRequest) GetDuration() uint32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type GPUProfilingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// version: indicating cupti pc sampling api version, 0/1 for old/new version
	Version           bool                     `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	PcSamplingData    []*CUptiPCSamplingData   `protobuf:"bytes,3,rep,name=pcSamplingData,proto3" json:"pcSamplingData,omitempty"`
	CpuCallingCtxTree []*CPUCallingContextTree `protobuf:"bytes,4,rep,name=cpuCallingCtxTree,proto3" json:"cpuCallingCtxTree,omitempty"`
}

func (x *GPUProfilingResponse) Reset() {
	*x = GPUProfilingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpu_profiling_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPUProfilingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPUProfilingResponse) ProtoMessage() {}

func (x *GPUProfilingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_profiling_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPUProfilingResponse.ProtoReflect.Descriptor instead.
func (*GPUProfilingResponse) Descriptor() ([]byte, []int) {
	return file_gpu_profiling_proto_rawDescGZIP(), []int{9}
}

func (x *GPUProfilingResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GPUProfilingResponse) GetVersion() bool {
	if x != nil {
		return x.Version
	}
	return false
}

func (x *GPUProfilingResponse) GetPcSamplingData() []*CUptiPCSamplingData {
	if x != nil {
		return x.PcSamplingData
	}
	return nil
}

func (x *GPUProfilingResponse) GetCpuCallingCtxTree() []*CPUCallingContextTree {
	if x != nil {
		return x.CpuCallingCtxTree
	}
	return nil
}

var File_gpu_profiling_proto protoreflect.FileDescriptor

var file_gpu_profiling_proto_rawDesc = []byte{
	0x0a, 0x13, 0x67, 0x70, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x67, 0x70, 0x75, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x69, 0x6e, 0x67, 0x22, 0xad, 0x02, 0x0a, 0x15, 0x43, 0x50, 0x55, 0x43, 0x61, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x54, 0x72, 0x65, 0x65, 0x12, 0x37, 0x0a,
	0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x70,
	0x75, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x50, 0x55, 0x43, 0x61,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x74, 0x50, 0x43,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x74, 0x50, 0x43, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x72, 0x6f, 0x6f, 0x74, 0x49, 0x44, 0x12, 0x4a, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x61,
	0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x70, 0x75, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x50, 0x55, 0x43, 0x61, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x54, 0x72, 0x65, 0x65, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x4d,
	0x61, 0x70, 0x1a, 0x5f, 0x0a, 0x0c, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x70, 0x75, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x43, 0x50, 0x55, 0x43, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x98, 0x02, 0x0a, 0x15, 0x43, 0x50, 0x55, 0x43, 0x61, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x70, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x70, 0x63, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x43, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x43, 0x12, 0x3b, 0x0a, 0x06, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x70, 0x75, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x50, 0x55, 0x43, 0x61, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x49,
	0x44, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x04, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x49,
	0x44, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x50, 0x43, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x50, 0x43, 0x73, 0x22, 0x9d,
	0x01, 0x0a, 0x13, 0x47, 0x50, 0x55, 0x43, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x62, 0x69, 0x6e, 0x43,
	0x72, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x75, 0x62, 0x69, 0x6e, 0x43,
	0x72, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x45, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x45, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xb5,
	0x01, 0x0a, 0x13, 0x47, 0x50, 0x55, 0x43, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x45, 0x64, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x72, 0x63, 0x46, 0x75, 0x6e,
	0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x72, 0x63,
	0x46, 0x75, 0x6e, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x72, 0x63, 0x50,
	0x43, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73,
	0x72, 0x63, 0x50, 0x43, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x73,
	0x74, 0x46, 0x75, 0x6e, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x73, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x73, 0x74, 0x50, 0x43, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x64, 0x73, 0x74, 0x50, 0x43, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x83, 0x01, 0x0a, 0x0f, 0x47, 0x50, 0x55, 0x43, 0x61,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x61, 0x70, 0x68, 0x12, 0x37, 0x0a, 0x05, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x70, 0x75, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x50, 0x55, 0x43, 0x61, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x47, 0x72, 0x61, 0x70, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x05, 0x65, 0x64, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x70, 0x75, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x47, 0x50, 0x55, 0x43, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x45, 0x64, 0x67, 0x65, 0x52, 0x05, 0x65, 0x64, 0x67, 0x65, 0x73, 0x22, 0x71, 0x0a, 0x15,
	0x50, 0x43, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x1a, 0x70, 0x63, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x70, 0x63, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x22,
	0xfe, 0x02, 0x0a, 0x15, 0x43, 0x55, 0x70, 0x74, 0x69, 0x50, 0x43, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x69, 0x6e, 0x67, 0x50, 0x43, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x75, 0x62, 0x69, 0x6e, 0x43, 0x72, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x63, 0x75, 0x62, 0x69, 0x6e, 0x43, 0x72, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x63, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x63, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x70,
	0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x61, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a,
	0x0b, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x70, 0x75, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x50, 0x43, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x6c,
	0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x50,
	0x55, 0x50, 0x43, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x43, 0x50, 0x55, 0x50, 0x43, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f,
	0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x22, 0xfe, 0x02, 0x0a, 0x13, 0x43, 0x55, 0x70, 0x74, 0x69, 0x50, 0x43, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6d, 0x50, 0x63, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6d, 0x50,
	0x63, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65,
	0x64, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e,
	0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x50, 0x63, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x50, 0x63, 0x73,
	0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d,
	0x50, 0x63, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x50, 0x63, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x07, 0x70, 0x50, 0x63, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x70, 0x75, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x55, 0x70, 0x74, 0x69, 0x50, 0x43, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x69, 0x6e, 0x67, 0x50, 0x43, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x70, 0x50, 0x63, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x3c, 0x0a, 0x19, 0x6e, 0x6f, 0x6e, 0x55, 0x73, 0x72, 0x4b, 0x65, 0x72,
	0x6e, 0x65, 0x6c, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x6e, 0x6f, 0x6e, 0x55, 0x73, 0x72, 0x4b, 0x65,
	0x72, 0x6e, 0x65, 0x6c, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x22, 0x31, 0x0a, 0x13, 0x47, 0x50, 0x55, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe8, 0x01, 0x0a, 0x14, 0x47, 0x50, 0x55, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x49, 0x0a, 0x0e, 0x70, 0x63, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x70, 0x75, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x55, 0x70, 0x74, 0x69, 0x50, 0x43,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x70, 0x63,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x51, 0x0a, 0x11,
	0x63, 0x70, 0x75, 0x43, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x74, 0x78, 0x54, 0x72, 0x65,
	0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x70, 0x75, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x50, 0x55, 0x43, 0x61, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x54, 0x72, 0x65, 0x65, 0x52, 0x11, 0x63, 0x70,
	0x75, 0x43, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x74, 0x78, 0x54, 0x72, 0x65, 0x65, 0x32,
	0x75, 0x0a, 0x13, 0x47, 0x50, 0x55, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5e, 0x0a, 0x13, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x47, 0x50, 0x55, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x2e,
	0x67, 0x70, 0x75, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x50, 0x55,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x67, 0x70, 0x75, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x47, 0x50, 0x55, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x21, 0x5a, 0x15, 0x2e, 0x2f, 0x67, 0x6f, 0x2d, 0x67,
	0x65, 0x6e, 0x3b, 0x67, 0x70, 0x75, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0xa2,
	0x02, 0x07, 0x47, 0x50, 0x55, 0x50, 0x52, 0x4f, 0x46, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_gpu_profiling_proto_rawDescOnce sync.Once
	file_gpu_profiling_proto_rawDescData = file_gpu_profiling_proto_rawDesc
)

func file_gpu_profiling_proto_rawDescGZIP() []byte {
	file_gpu_profiling_proto_rawDescOnce.Do(func() {
		file_gpu_profiling_proto_rawDescData = protoimpl.X.CompressGZIP(file_gpu_profiling_proto_rawDescData)
	})
	return file_gpu_profiling_proto_rawDescData
}

var file_gpu_profiling_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_gpu_profiling_proto_goTypes = []interface{}{
	(*CPUCallingContextTree)(nil), // 0: gpuprofiling.CPUCallingContextTree
	(*CPUCallingContextNode)(nil), // 1: gpuprofiling.CPUCallingContextNode
	(*GPUCallingGraphNode)(nil),   // 2: gpuprofiling.GPUCallingGraphNode
	(*GPUCallingGraphEdge)(nil),   // 3: gpuprofiling.GPUCallingGraphEdge
	(*GPUCallingGraph)(nil),       // 4: gpuprofiling.GPUCallingGraph
	(*PCSamplingStallReason)(nil), // 5: gpuprofiling.PCSamplingStallReason
	(*CUptiPCSamplingPCData)(nil), // 6: gpuprofiling.CUptiPCSamplingPCData
	(*CUptiPCSamplingData)(nil),   // 7: gpuprofiling.CUptiPCSamplingData
	(*GPUProfilingRequest)(nil),   // 8: gpuprofiling.GPUProfilingRequest
	(*GPUProfilingResponse)(nil),  // 9: gpuprofiling.GPUProfilingResponse
	nil,                           // 10: gpuprofiling.CPUCallingContextTree.NodeMapEntry
}
var file_gpu_profiling_proto_depIdxs = []int32{
	1,  // 0: gpuprofiling.CPUCallingContextTree.root:type_name -> gpuprofiling.CPUCallingContextNode
	10, // 1: gpuprofiling.CPUCallingContextTree.nodeMap:type_name -> gpuprofiling.CPUCallingContextTree.NodeMapEntry
	1,  // 2: gpuprofiling.CPUCallingContextNode.childs:type_name -> gpuprofiling.CPUCallingContextNode
	2,  // 3: gpuprofiling.GPUCallingGraph.nodes:type_name -> gpuprofiling.GPUCallingGraphNode
	3,  // 4: gpuprofiling.GPUCallingGraph.edges:type_name -> gpuprofiling.GPUCallingGraphEdge
	5,  // 5: gpuprofiling.CUptiPCSamplingPCData.stallReason:type_name -> gpuprofiling.PCSamplingStallReason
	6,  // 6: gpuprofiling.CUptiPCSamplingData.pPcData:type_name -> gpuprofiling.CUptiPCSamplingPCData
	7,  // 7: gpuprofiling.GPUProfilingResponse.pcSamplingData:type_name -> gpuprofiling.CUptiPCSamplingData
	0,  // 8: gpuprofiling.GPUProfilingResponse.cpuCallingCtxTree:type_name -> gpuprofiling.CPUCallingContextTree
	1,  // 9: gpuprofiling.CPUCallingContextTree.NodeMapEntry.value:type_name -> gpuprofiling.CPUCallingContextNode
	8,  // 10: gpuprofiling.GPUProfilingService.PerformGPUProfiling:input_type -> gpuprofiling.GPUProfilingRequest
	9,  // 11: gpuprofiling.GPUProfilingService.PerformGPUProfiling:output_type -> gpuprofiling.GPUProfilingResponse
	11, // [11:12] is the sub-list for method output_type
	10, // [10:11] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_gpu_profiling_proto_init() }
func file_gpu_profiling_proto_init() {
	if File_gpu_profiling_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_gpu_profiling_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPUCallingContextTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpu_profiling_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPUCallingContextNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpu_profiling_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GPUCallingGraphNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpu_profiling_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GPUCallingGraphEdge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpu_profiling_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GPUCallingGraph); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpu_profiling_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PCSamplingStallReason); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpu_profiling_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUptiPCSamplingPCData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpu_profiling_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUptiPCSamplingData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpu_profiling_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GPUProfilingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpu_profiling_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GPUProfilingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gpu_profiling_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_gpu_profiling_proto_goTypes,
		DependencyIndexes: file_gpu_profiling_proto_depIdxs,
		MessageInfos:      file_gpu_profiling_proto_msgTypes,
	}.Build()
	File_gpu_profiling_proto = out.File
	file_gpu_profiling_proto_rawDesc = nil
	file_gpu_profiling_proto_goTypes = nil
	file_gpu_profiling_proto_depIdxs = nil
}
